import mongoose, { Schema, Document } from 'mongoose';

// User interface
export interface IUser extends Document {
  email: string;
  name?: string;
  password: string;
  avatar?: string;
  role: 'user' | 'admin';
  verified: boolean;
  createdAt: Date;
  updatedAt: Date;
}

// User schema
const UserSchema: Schema = new Schema(
  {
    email: {
      type: String,
      required: true,
      unique: true,
      lowercase: true,
      trim: true,
      validate: {
        validator: function(email: string) {
          return /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test(email);
        },
        message: 'Please enter a valid email address',
      },
    },
    name: {
      type: String,
      trim: true,
      maxlength: 100,
    },
    password: {
      type: String,
      required: true,
      minlength: 6,
    },
    avatar: {
      type: String,
      default: null,
    },
    role: {
      type: String,
      enum: ['user', 'admin'],
      default: 'user',
    },
    verified: {
      type: Boolean,
      default: false,
    },
  },
  {
    timestamps: true,
    versionKey: false,
  }
);

// Index for better performance
UserSchema.index({ email: 1 });
UserSchema.index({ createdAt: -1 });

// Post interface
export interface IPost extends Document {
  title: string;
  content?: string;
  published: boolean;
  author: mongoose.Types.ObjectId;
  tags: string[];
  createdAt: Date;
  updatedAt: Date;
}

// Post schema
const PostSchema: Schema = new Schema(
  {
    title: {
      type: String,
      required: true,
      trim: true,
      maxlength: 200,
    },
    content: {
      type: String,
      trim: true,
    },
    published: {
      type: Boolean,
      default: false,
    },
    author: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
    tags: [{
      type: String,
      trim: true,
      lowercase: true,
    }],
  },
  {
    timestamps: true,
    versionKey: false,
  }
);

// Indexes for better performance
PostSchema.index({ author: 1 });
PostSchema.index({ published: 1 });
PostSchema.index({ createdAt: -1 });
PostSchema.index({ tags: 1 });

// Virtual for post URL
PostSchema.virtual('url').get(function(this: IPost) {
  return `/posts/${this._id}`;
});

// Ensure virtual fields are serialized
PostSchema.set('toJSON', {
  virtuals: true,
});

// Models
export const User = mongoose.model<IUser>('User', UserSchema);
export const Post = mongoose.model<IPost>('Post', PostSchema);

// Database connection
export const connectDB = async (): Promise<void> => {
  try {
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/{{projectName}}';
    
    await mongoose.connect(mongoURI, {
      // Modern connection options
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    console.log('MongoDB connected successfully');
    
    // Graceful shutdown
    process.on('SIGINT', async () => {
      await mongoose.connection.close();
      console.log('MongoDB connection closed');
      process.exit(0);
    });
    
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1);
  }
};

export default mongoose;
