const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const GitHubStrategy = require('passport-github2').Strategy;

{{#if database.prisma}}
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
{{/if}}
{{#if database.mongoose}}
const User = require('../models/User');
{{/if}}

// Google OAuth Strategy
passport.use(new GoogleStrategy({
  clientID: process.env.GOOGLE_CLIENT_ID,
  clientSecret: process.env.GOOGLE_CLIENT_SECRET,
  callbackURL: "/auth/google/callback"
}, async (accessToken, refreshToken, profile, done) => {
  try {
    {{#if database.prisma}}
    let user = await prisma.user.findUnique({
      where: { googleId: profile.id }
    });

    if (!user) {
      user = await prisma.user.create({
        data: {
          googleId: profile.id,
          email: profile.emails[0].value,
          name: profile.displayName,
          avatar: profile.photos[0].value
        }
      });
    }
    {{/if}}
    
    {{#if database.mongoose}}
    let user = await User.findOne({ googleId: profile.id });

    if (!user) {
      user = new User({
        googleId: profile.id,
        email: profile.emails[0].value,
        name: profile.displayName,
        avatar: profile.photos[0].value
      });
      await user.save();
    }
    {{/if}}

    return done(null, user);
  } catch (error) {
    return done(error, null);
  }
}));

// GitHub OAuth Strategy
passport.use(new GitHubStrategy({
  clientID: process.env.GITHUB_CLIENT_ID,
  clientSecret: process.env.GITHUB_CLIENT_SECRET,
  callbackURL: "/auth/github/callback"
}, async (accessToken, refreshToken, profile, done) => {
  try {
    {{#if database.prisma}}
    let user = await prisma.user.findUnique({
      where: { githubId: profile.id }
    });

    if (!user) {
      user = await prisma.user.create({
        data: {
          githubId: profile.id,
          email: profile.emails?.[0]?.value || `${profile.username}@github.local`,
          name: profile.displayName || profile.username,
          avatar: profile.photos[0].value,
          username: profile.username
        }
      });
    }
    {{/if}}
    
    {{#if database.mongoose}}
    let user = await User.findOne({ githubId: profile.id });

    if (!user) {
      user = new User({
        githubId: profile.id,
        email: profile.emails?.[0]?.value || `${profile.username}@github.local`,
        name: profile.displayName || profile.username,
        avatar: profile.photos[0].value,
        username: profile.username
      });
      await user.save();
    }
    {{/if}}

    return done(null, user);
  } catch (error) {
    return done(error, null);
  }
}));

module.exports = passport;
