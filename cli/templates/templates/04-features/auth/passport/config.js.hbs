const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const JwtStrategy = require('passport-jwt').Strategy;
const ExtractJwt = require('passport-jwt').ExtractJwt;
const bcrypt = require('bcryptjs');

{{#if database.prisma}}
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
{{/if}}
{{#if database.mongoose}}
const User = require('../models/User');
{{/if}}

// Local Strategy
passport.use(new LocalStrategy(
  {
    usernameField: 'email',
    passwordField: 'password'
  },
  async (email, password, done) => {
    try {
      {{#if database.prisma}}
      const user = await prisma.user.findUnique({ where: { email } });
      {{/if}}
      {{#if database.mongoose}}
      const user = await User.findOne({ email });
      {{/if}}

      if (!user) {
        return done(null, false, { message: 'User not found' });
      }

      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return done(null, false, { message: 'Invalid password' });
      }

      return done(null, user);
    } catch (error) {
      return done(error);
    }
  }
));

// JWT Strategy
passport.use(new JwtStrategy(
  {
    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
    secretOrKey: process.env.JWT_SECRET
  },
  async (payload, done) => {
    try {
      {{#if database.prisma}}
      const user = await prisma.user.findUnique({ where: { id: payload.id } });
      {{/if}}
      {{#if database.mongoose}}
      const user = await User.findById(payload.id);
      {{/if}}

      if (user) {
        return done(null, user);
      } else {
        return done(null, false);
      }
    } catch (error) {
      return done(error);
    }
  }
));

// Serialize user
passport.serializeUser((user, done) => {
  done(null, user.id);
});

// Deserialize user
passport.deserializeUser(async (id, done) => {
  try {
    {{#if database.prisma}}
    const user = await prisma.user.findUnique({ where: { id } });
    {{/if}}
    {{#if database.mongoose}}
    const user = await User.findById(id);
    {{/if}}
    done(null, user);
  } catch (error) {
    done(error);
  }
});

module.exports = passport;
