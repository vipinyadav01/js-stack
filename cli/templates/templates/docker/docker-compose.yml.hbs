version: '3.8'

services:
  {{#if hasBackend}}
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: {{projectName}}-backend
    ports:
      - "{{backendPort}}:{{backendPort}}"
    environment:
      - NODE_ENV=development
      {{#if hasDatabase}}
      - DATABASE_URL={{databaseUrl}}
      {{/if}}
      {{#if useRedis}}
      - REDIS_URL=redis://redis:6379
      {{/if}}
      - JWT_SECRET=${JWT_SECRET}
      - PORT={{backendPort}}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      {{#if hasDatabase}}
      - database
      {{/if}}
      {{#if useRedis}}
      - redis
      {{/if}}
    networks:
      - app-network
    command: npm run dev
  {{/if}}

  {{#if hasFrontend}}
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: {{projectName}}-frontend
    ports:
      - "{{frontendPort}}:{{frontendPort}}"
    environment:
      - NODE_ENV=development
      {{#if hasBackend}}
      - NEXT_PUBLIC_API_URL=http://backend:{{backendPort}}
      {{/if}}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    {{#if hasBackend}}
    depends_on:
      - backend
    {{/if}}
    networks:
      - app-network
    command: npm run dev
  {{/if}}

  {{#if usePostgres}}
  postgres:
    image: postgres:16-alpine
    container_name: {{projectName}}-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER={{dbUser}}
      - POSTGRES_PASSWORD={{dbPassword}}
      - POSTGRES_DB={{dbName}}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U {{dbUser}}"]
      interval: 10s
      timeout: 5s
      retries: 5
  {{/if}}

  {{#if useMongoDB}}
  mongodb:
    image: mongo:7-jammy
    container_name: {{projectName}}-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME={{dbUser}}
      - MONGO_INITDB_ROOT_PASSWORD={{dbPassword}}
      - MONGO_INITDB_DATABASE={{dbName}}
    volumes:
      - mongodb-data:/data/db
      - ./backend/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
  {{/if}}

  {{#if useMySQL}}
  mysql:
    image: mysql:8-oracle
    container_name: {{projectName}}-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD={{dbPassword}}
      - MYSQL_DATABASE={{dbName}}
      - MYSQL_USER={{dbUser}}
      - MYSQL_PASSWORD={{dbPassword}}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
  {{/if}}

  {{#if useRedis}}
  redis:
    image: redis:7-alpine
    container_name: {{projectName}}-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  {{/if}}

  {{#if useElasticsearch}}
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: {{projectName}}-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
  {{/if}}

  {{#if useRabbitMQ}}
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: {{projectName}}-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER={{mqUser}}
      - RABBITMQ_DEFAULT_PASS={{mqPassword}}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
  {{/if}}

  {{#if useNginx}}
  nginx:
    image: nginx:alpine
    container_name: {{projectName}}-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      {{#if hasFrontend}}
      - frontend
      {{/if}}
      {{#if hasBackend}}
      - backend
      {{/if}}
    networks:
      - app-network
  {{/if}}

  {{#if useAdminer}}
  adminer:
    image: adminer:latest
    container_name: {{projectName}}-adminer
    ports:
      - "8080:8080"
    depends_on:
      {{#if usePostgres}}
      - postgres
      {{/if}}
      {{#if useMySQL}}
      - mysql
      {{/if}}
    networks:
      - app-network
  {{/if}}

networks:
  app-network:
    driver: bridge

volumes:
  {{#if usePostgres}}
  postgres-data:
  {{/if}}
  {{#if useMongoDB}}
  mongodb-data:
  {{/if}}
  {{#if useMySQL}}
  mysql-data:
  {{/if}}
  {{#if useRedis}}
  redis-data:
  {{/if}}
  {{#if useElasticsearch}}
  elasticsearch-data:
  {{/if}}
  {{#if useRabbitMQ}}
  rabbitmq-data:
  {{/if}}
