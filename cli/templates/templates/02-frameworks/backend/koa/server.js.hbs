{{#if useTypeScript}}import Koa from 'koa';
import Router from 'koa-router';
import bodyParser from 'koa-bodyparser';
import cors from 'koa-cors';
import helmet from 'koa-helmet';
import rateLimit from 'koa-ratelimit';
import compress from 'koa-compress';
import logger from 'koa-logger';
import dotenv from 'dotenv';
{{#if useJWT}}import jwt from 'koa-jwt';
import jsonwebtoken from 'jsonwebtoken';
import bcrypt from 'bcryptjs';{{/if}}
{{#if usePrisma}}import { PrismaClient } from '@prisma/client';{{/if}}
{{#if useMongoose}}import mongoose from 'mongoose';{{/if}}
{{#if useRedis}}import { createClient } from 'redis';{{/if}}
{{#if useSocketIO}}import { createServer } from 'http';
import { Server } from 'socket.io';{{/if}}

dotenv.config();

const app = new Koa();
const router = new Router();
const PORT = parseInt(process.env.PORT || '{{backendPort}}', 10);
{{else}}const Koa = require('koa');
const Router = require('koa-router');
const bodyParser = require('koa-bodyparser');
const cors = require('koa-cors');
const helmet = require('koa-helmet');
const rateLimit = require('koa-ratelimit');
const compress = require('koa-compress');
const logger = require('koa-logger');
require('dotenv').config();
{{#if useJWT}}const jwt = require('koa-jwt');
const jsonwebtoken = require('jsonwebtoken');
const bcrypt = require('bcryptjs');{{/if}}
{{#if usePrisma}}const { PrismaClient } = require('@prisma/client');{{/if}}
{{#if useMongoose}}const mongoose = require('mongoose');{{/if}}
{{#if useRedis}}const { createClient } = require('redis');{{/if}}
{{#if useSocketIO}}const { createServer } = require('http');
const { Server } = require('socket.io');{{/if}}

const app = new Koa();
const router = new Router();
const PORT = parseInt(process.env.PORT || '{{backendPort}}', 10);
{{/if}}

{{#if usePrisma}}
const prisma = new PrismaClient();
{{/if}}

{{#if useRedis}}
const redisClient = createClient({
  url: process.env.REDIS_URL || 'redis://localhost:6379'
});
{{/if}}

// Database connections
async function connectDatabases() {
  {{#if useMongoose}}
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/{{projectName}}');
    console.log('Connected to MongoDB');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1);
  }
  {{/if}}

  {{#if useRedis}}
  try {
    await redisClient.connect();
    console.log('Connected to Redis');
  } catch (error) {
    console.error('Redis connection error:', error);
  }
  {{/if}}

  {{#if usePrisma}}
  try {
    await prisma.$connect();
    console.log('Connected to database via Prisma');
  } catch (error) {
    console.error('Database connection error:', error);
    process.exit(1);
  }
  {{/if}}
}

// Error handling middleware
app.use(async (ctx, next) => {
  try {
    await next();
  } catch (err) {
    ctx.status = err.status || 500;
    ctx.body = {
      error: err.name || 'Internal Server Error',
      message: process.env.NODE_ENV === 'production' 
        ? 'Something went wrong' 
        : err.message
    };
    
    if (ctx.status === 500) {
      console.error('Server Error:', err);
    }
  }
});

// Security middleware
app.use(helmet());

// CORS
app.use(cors({
  origin: process.env.CORS_ORIGIN || '*',
  credentials: true
}));

// Rate limiting
const rateLimitOptions = {
  driver: 'memory',
  db: new Map(),
  duration: 60000, // 1 minute
  errorMessage: 'Too many requests',
  id: (ctx) => ctx.ip,
  headers: {
    remaining: 'Rate-Limit-Remaining',
    reset: 'Rate-Limit-Reset',
    total: 'Rate-Limit-Total'
  },
  max: parseInt(process.env.RATE_LIMIT || '100', 10)
};

app.use(rateLimit(rateLimitOptions));

// Compression
app.use(compress({
  filter: (content_type) => /text/i.test(content_type),
  threshold: 2048,
  gzip: {
    flush: require('zlib').constants.Z_SYNC_FLUSH,
  },
  deflate: {
    flush: require('zlib').constants.Z_SYNC_FLUSH,
  },
  br: false // disable brotli
}));

// Logging
if (process.env.NODE_ENV !== 'test') {
  app.use(logger());
}

// Body parser
app.use(bodyParser({
  enableTypes: ['json', 'form'],
  jsonLimit: '10mb',
  formLimit: '10mb',
  textLimit: '10mb'
}));

{{#if useJWT}}
// JWT middleware (protect routes)
const jwtSecret = process.env.JWT_SECRET || 'your-secret-key-change-this-in-production';

app.use(jwt({
  secret: jwtSecret,
  passthrough: true // Allow requests without token to pass through
}));
{{/if}}

// Routes
router.get('/api/health', async (ctx) => {
  ctx.body = {
    status: 'OK',
    message: 'Server is running',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  };
});

{{#if useJWT}}
// Auth routes
router.post('/api/login', async (ctx) => {
  // TODO: Implement login logic
  const { email, password } = ctx.request.body;
  
  // Example validation (replace with actual user validation)
  if (!email || !password) {
    ctx.status = 400;
    ctx.body = { error: 'Email and password are required' };
    return;
  }
  
  // Generate JWT token
  const token = jsonwebtoken.sign(
    { userId: 1, email },
    jwtSecret,
    { expiresIn: process.env.JWT_EXPIRES_IN || '24h' }
  );
  
  ctx.body = { token, user: { id: 1, email } };
});

// Protected route example
router.get('/api/protected', async (ctx) => {
  if (!ctx.state.user) {
    ctx.status = 401;
    ctx.body = { error: 'Authentication required' };
    return;
  }
  
  ctx.body = {
    message: 'This is a protected route',
    user: ctx.state.user
  };
});
{{/if}}

// Apply routes
app.use(router.routes());
app.use(router.allowedMethods());

{{#if useSocketIO}}
// Socket.IO setup
const server = createServer(app.callback());
const io = new Server(server, {
  cors: {
    origin: process.env.CORS_ORIGIN || "*",
    methods: ["GET", "POST"]
  }
});

io.on('connection', (socket) => {
  console.log('User connected:', socket.id);
  
  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});
{{/if}}

// Graceful shutdown
const gracefulShutdown = async (signal) => {
  console.log(`Received ${signal}, shutting down gracefully`);
  
  {{#if useRedis}}
  await redisClient.quit();
  {{/if}}
  
  {{#if usePrisma}}
  await prisma.$disconnect();
  {{/if}}
  
  {{#if useMongoose}}
  await mongoose.connection.close();
  {{/if}}
  
  process.exit(0);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Start server
const startServer = async () => {
  try {
    await connectDatabases();
    
    {{#if useSocketIO}}
    server.listen(PORT, () => {
      console.log(`Server with Socket.IO listening on http://localhost:${PORT}`);
    });
    {{else}}
    app.listen(PORT, () => {
      console.log(`Server listening on http://localhost:${PORT}`);
    });
    {{/if}}
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
};

startServer();
