{{#if useTypeScript}}import fastify, { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';
import cors from '@fastify/cors';
import helmet from '@fastify/helmet';
import rateLimit from '@fastify/rate-limit';
import autoload from '@fastify/autoload';
import path from 'path';
import dotenv from 'dotenv';
{{#if useJWT}}import jwt from '@fastify/jwt';{{/if}}
{{#if usePrisma}}import { PrismaClient } from '@prisma/client';{{/if}}
{{#if useMongoose}}import mongoose from 'mongoose';{{/if}}
{{#if useRedis}}import { createClient } from 'redis';{{/if}}

dotenv.config();

const server: FastifyInstance = fastify({
  logger: {
    level: process.env.LOG_LEVEL || 'info',
    prettyPrint: process.env.NODE_ENV === 'development'
  }
});

const PORT = parseInt(process.env.PORT || '{{backendPort}}', 10);
{{else}}const fastify = require('fastify');
const path = require('path');
require('dotenv').config();
{{#if useJWT}}const jwt = require('@fastify/jwt');{{/if}}
{{#if usePrisma}}const { PrismaClient } = require('@prisma/client');{{/if}}
{{#if useMongoose}}const mongoose = require('mongoose');{{/if}}
{{#if useRedis}}const { createClient } = require('redis');{{/if}}

const server = fastify({
  logger: {
    level: process.env.LOG_LEVEL || 'info',
    prettyPrint: process.env.NODE_ENV === 'development'
  }
});

const PORT = parseInt(process.env.PORT || '{{backendPort}}', 10);
{{/if}}

{{#if usePrisma}}
const prisma = new PrismaClient();
{{/if}}

{{#if useRedis}}
const redisClient = createClient({
  url: process.env.REDIS_URL || 'redis://localhost:6379'
});
{{/if}}

// Register plugins
async function registerPlugins() {
  // Security plugins
  await server.register(require('@fastify/helmet'), {
    contentSecurityPolicy: process.env.NODE_ENV === 'production'
  });

  await server.register(require('@fastify/cors'), {
    origin: process.env.CORS_ORIGIN || true,
    credentials: true
  });

  await server.register(require('@fastify/rate-limit'), {
    max: parseInt(process.env.RATE_LIMIT || '100', 10),
    timeWindow: '1 minute'
  });

  {{#if useJWT}}
  // JWT plugin
  await server.register(require('@fastify/jwt'), {
    secret: process.env.JWT_SECRET || 'your-secret-key-change-this-in-production'
  });
  {{/if}}

  // Auto-load routes
  await server.register(require('@fastify/autoload'), {
    dir: path.join(__dirname, 'routes'),
    options: { prefix: '/api' }
  });
}

// Database connections
async function connectDatabases() {
  {{#if useMongoose}}
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/{{projectName}}');
    server.log.info('Connected to MongoDB');
  } catch (error) {
    server.log.error('MongoDB connection error:', error);
    process.exit(1);
  }
  {{/if}}

  {{#if useRedis}}
  try {
    await redisClient.connect();
    server.log.info('Connected to Redis');
  } catch (error) {
    server.log.error('Redis connection error:', error);
  }
  {{/if}}

  {{#if usePrisma}}
  try {
    await prisma.$connect();
    server.log.info('Connected to database via Prisma');
  } catch (error) {
    server.log.error('Database connection error:', error);
    process.exit(1);
  }
  {{/if}}
}

// Routes
server.get('/api/health', async (request, reply) => {
  return {
    status: 'OK',
    message: 'Server is running',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  };
});

{{#if useJWT}}
// Authentication middleware
server.decorate('authenticate', async function(request, reply) {
  try {
    await request.jwtVerify();
  } catch (err) {
    reply.send(err);
  }
});

// Auth routes
server.post('/api/login', async (request, reply) => {
  // TODO: Implement login logic
  const token = server.jwt.sign({ userId: 1 });
  return { token };
});

// Protected route example
server.get('/api/protected', { preHandler: [server.authenticate] }, async (request, reply) => {
  return { message: 'This is a protected route', user: request.user };
});
{{/if}}

// Error handling
server.setErrorHandler((error, request, reply) => {
  server.log.error(error);
  
  if (error.validation) {
    reply.status(400).send({
      error: 'Validation Error',
      message: error.message,
      details: error.validation
    });
  } else if (error.statusCode) {
    reply.status(error.statusCode).send({
      error: error.name,
      message: error.message
    });
  } else {
    reply.status(500).send({
      error: 'Internal Server Error',
      message: process.env.NODE_ENV === 'production' 
        ? 'Something went wrong' 
        : error.message
    });
  }
});

// Graceful shutdown
const gracefulShutdown = async (signal) => {
  server.log.info(`Received ${signal}, shutting down gracefully`);
  
  {{#if useRedis}}
  await redisClient.quit();
  {{/if}}
  
  {{#if usePrisma}}
  await prisma.$disconnect();
  {{/if}}
  
  {{#if useMongoose}}
  await mongoose.connection.close();
  {{/if}}
  
  await server.close();
  process.exit(0);
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Start server
const start = async () => {
  try {
    await connectDatabases();
    await registerPlugins();
    
    await server.listen({
      port: PORT,
      host: process.env.HOST || '0.0.0.0'
    });
    
    server.log.info(`Server listening on http://localhost:${PORT}`);
  } catch (err) {
    server.log.error(err);
    process.exit(1);
  }
};

start();
