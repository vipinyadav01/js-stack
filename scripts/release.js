#!/usr/bin/env node

/**
 * Quick Release Script for JS Stack
 * Hand  syncVersions: () => {
    console.log('ÔøΩ Syncing version references across the project...');
    
    try {
      const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      const currentVersion = packageJson.version;
      
      console.log(`üì¶ Current version: ${currentVersion}`);
      
      // Check if web package.json needs updating
      const webPackagePath = 'web/package.json';
      if (fs.existsSync(webPackagePath)) {
        const webPackage = JSON.parse(fs.readFileSync(webPackagePath, 'utf8'));
        if (webPackage.version !== currentVersion) {
          console.log(`üîÑ Updating web package version: ${webPackage.version} ‚Üí ${currentVersion}`);
          webPackage.version = currentVersion;
          fs.writeFileSync(webPackagePath, JSON.stringify(webPackage, null, 2) + '\n');
        }
      }
      
      // Check for any hardcoded version references in key files
      const filesToCheck = [
        'README.md',
        'web/README.md',
        'SCRIPTS.md'
      ];
      
      console.log('ÔøΩ Checking for outdated version references...');
      let foundOutdated = false;
      
      for (const file of filesToCheck) {
        if (fs.existsSync(file)) {
          const content = fs.readFileSync(file, 'utf8');
          const versionRegex = /\b\d+\.\d+\.\d+\b/g;
          const matches = content.match(versionRegex);
          
          if (matches) {
            const outdatedVersions = matches.filter(v => v !== currentVersion);
            if (outdatedVersions.length > 0) {
              console.log(`‚ö†Ô∏è  Found potentially outdated versions in ${file}: ${outdatedVersions.join(', ')}`);
              foundOutdated = true;
            }
          }
        }
      }
      
      if (!foundOutdated) {
        console.log('‚úÖ No outdated version references found');
      }
      
      console.log('üí° Version sync complete!');
      console.log(`üí° Current version: ${currentVersion}`);
      
    } catch (error) {
      console.error('‚ùå Error syncing versions:', error.message);
    }
  },development and release workflows
 */

import { execSync } from "child_process";
import { readFileSync } from "fs";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const commands = {
  setup: () => {
    console.log("üîß Setting up development environment...");
    execSync("npm install", { stdio: "inherit" });
    execSync("npx husky install", { stdio: "inherit" });
    console.log("‚úÖ Setup complete!");
  },

  push: () => {
    console.log("üîç Checking git status...");
    const status = execSync("git status --porcelain").toString().trim();

    if (!status) {
      console.log("üìù No changes to commit");
      return;
    }

    console.log("üìù Adding all changes...");
    execSync("git add .", { stdio: "inherit" });

    console.log("‚úÖ Committing changes...");
    execSync('git commit -m "feat: development updates"', { stdio: "inherit" });

    console.log("‚¨ÜÔ∏è Pushing to main...");
    execSync("git push origin main", { stdio: "inherit" });

    console.log("üéâ Push complete!");
  },

  release: () => {
    console.log("üöÄ Starting full release process...");

    console.log("üìä Checking changeset status...");
    execSync("npx changeset status", { stdio: "inherit" });

    console.log("üì¶ Versioning packages...");
    execSync("npm run version-packages", { stdio: "inherit" });

    console.log("üî® Building release...");
    execSync("npm run build:release", { stdio: "inherit" });

    console.log("üìù Committing changes...");
    execSync("git add .", { stdio: "inherit" });
    execSync(
      'git commit -m "chore(release): version packages" -m "Generated by release script"',
      { stdio: "inherit" },
    );

    console.log("‚¨ÜÔ∏è Pushing to main...");
    execSync("git push origin main", { stdio: "inherit" });

    console.log("üéâ Release complete! CI/CD will handle publishing.");
  },

  status: () => {
    console.log("üìä Git Status:");
    execSync("git status --short", { stdio: "inherit" });

    console.log("\nüì¶ Changeset Status:");
    try {
      execSync("npx changeset status", { stdio: "inherit" });
    } catch (e) {
      console.log("No pending changesets");
    }
  },

  "check-releases": () => {
    console.log("üîç Checking for missing GitHub releases...");

    try {
      // Get all tags
      const tags = execSync('git tag -l "v*"', { encoding: "utf8" })
        .trim()
        .split("\n")
        .filter((tag) => tag.startsWith("v"))
        .sort()
        .reverse();

      console.log(`Found ${tags.length} version tags`);

      // Check if releases exist (this would require GitHub CLI or API)
      console.log(
        "üí° To check releases: Visit https://github.com/vipinyadav01/js-stack/releases",
      );
      console.log(
        "üí° To create missing releases: Use the manual release workflow in GitHub Actions",
      );

      tags.slice(0, 5).forEach((tag) => {
        console.log(`  - ${tag}`);
      });
    } catch (error) {
      console.error("‚ùå Error checking releases:", error.message);
    }
  },

  "sync-versions": () => {
    console.log("üîÑ Syncing version references across the project...");

    try {
      const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"));
      const currentVersion = packageJson.version;

      console.log(`üì¶ Current version: ${currentVersion}`);

      // Check if web package.json needs updating
      const webPackagePath = "web/package.json";
      if (fs.existsSync(webPackagePath)) {
        const webPackage = JSON.parse(fs.readFileSync(webPackagePath, "utf8"));
        if (webPackage.version !== currentVersion) {
          console.log(
            `üîÑ Updating web package version: ${webPackage.version} ‚Üí ${currentVersion}`,
          );
          webPackage.version = currentVersion;
          fs.writeFileSync(
            webPackagePath,
            JSON.stringify(webPackage, null, 2) + "\n",
          );
        }
      }

      // Check for any hardcoded version references in key files
      const filesToCheck = ["README.md", "web/README.md", "SCRIPTS.md"];

      console.log("üîç Checking for outdated version references...");
      let foundOutdated = false;

      for (const file of filesToCheck) {
        if (fs.existsSync(file)) {
          const content = fs.readFileSync(file, "utf8");
          const versionRegex = /\b\d+\.\d+\.\d+\b/g;
          const matches = content.match(versionRegex);

          if (matches) {
            const outdatedVersions = matches.filter(
              (v) => v !== currentVersion,
            );
            if (outdatedVersions.length > 0) {
              console.log(
                `‚ö†Ô∏è  Found potentially outdated versions in ${file}: ${outdatedVersions.join(", ")}`,
              );
              foundOutdated = true;
            }
          }
        }
      }

      if (!foundOutdated) {
        console.log("‚úÖ No outdated version references found");
      }

      console.log("üí° Version sync complete!");
      console.log(`üí° Current version: ${currentVersion}`);
    } catch (error) {
      console.error("‚ùå Error syncing versions:", error.message);
    }
  },
};

const args = process.argv.slice(2);
const command = args[0];

if (!command) {
  console.log(`
üöÄ JS Stack Quick Commands

Usage: node scripts/release.js <command>

Commands:
  setup          - Install dependencies and setup husky
  push           - Add, commit, and push all changes
  release        - Full release process (changeset + build + push)
  status         - Show git and changeset status
  check-releases - Check for missing GitHub releases
  sync-versions  - Sync version references across the project

Examples:
  node scripts/release.js setup
  node scripts/release.js push
  node scripts/release.js release
  node scripts/release.js status
  node scripts/release.js check-releases
  node scripts/release.js sync-versions
`);
  process.exit(0);
}

if (commands[command]) {
  try {
    commands[command]();
  } catch (error) {
    console.error(`‚ùå Error: ${error.message}`);
    process.exit(1);
  }
} else {
  console.error(`‚ùå Unknown command: ${command}`);
  console.log("Run without arguments to see available commands");
  process.exit(1);
}

if (commands[command]) {
  try {
    commands[command]();
  } catch (error) {
    console.error(`‚ùå Error: ${error.message}`);
    process.exit(1);
  }
} else {
  console.error(`‚ùå Unknown command: ${command}`);
  console.log("Run without arguments to see available commands");
  process.exit(1);
}
